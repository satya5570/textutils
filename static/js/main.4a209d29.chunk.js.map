{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","length","newText","toUpperCase","showAlert","toLowerCase","ntext","document","getElementById","focus","setSelectionRange","navigator","clipboard","writeText","split","join","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","defaultProps","about","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.4a209d29.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    return(\r\n        <nav className={`navbar navbar-expand-lg bg-${props.mode} navbar-${props.mode} `}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <a className=\"nav-a\" href=\"/about\">{props.about}</a>\r\n        </li> */}\r\n       \r\n      </ul>\r\n      {/* <form className=\"d-flex\" role=\"search\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n      </form> */}\r\n      <div className={`form-check form-switch text-${(props.mode ===\"light\")? \"dark\" : \"light\"}`}>\r\n  <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode}  id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable dark mode</label>\r\n</div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string,\r\n    about: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: \"set tile here\",\r\n    about: \"set about\"\r\n\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick = () => {\r\n    // console.log(\"upper case was clicked\");\r\n    if (text.length !== 0) {\r\n      let newText = text.toUpperCase();\r\n      setText(newText);\r\n      props.showAlert(\"text converted to uppercase\", \"success\");\r\n    } else {\r\n      props.showAlert(\"text field is empty, please enter something\", \"warning\");\r\n    }\r\n  };\r\n\r\n  const handleLoClick = () => {\r\n    // console.log(\"upper case was clicked\");\r\n    if (text.length !== 0) {\r\n      let newText = text.toLowerCase();\r\n      setText(newText);\r\n      props.showAlert(\"text converted to lowercase\", \"success\");\r\n    } else {\r\n      props.showAlert(\"text field is empty, please enter something\", \"warning\");\r\n    }\r\n  };\r\n\r\n  const handleCopy = () => {\r\n    if (text.length !== 0) {\r\n      var ntext = document.getElementById(\"myBox\");\r\n      ntext.focus();\r\n\r\n      ntext.setSelectionRange(0, 9999);\r\n      navigator.clipboard.writeText(ntext.value);\r\n      props.showAlert(\"text Copied\", \"success\");\r\n    } else {\r\n      props.showAlert(\r\n        \"text field is empty, please enter something for copy\",\r\n        \"warning\"\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    // console.log(\"on change\");\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const handleclear = (event) => {\r\n    if (text.length !== 0) {\r\n      let newText = \"\";\r\n      setText(newText);\r\n      props.showAlert(\"All text cleared\", \"success\");\r\n    } else {\r\n      props.showAlert(\"text field is already empty\", \"warning\");\r\n    }\r\n  };\r\n  const handleTrim = (event) => {\r\n    if (text.length !== 0) {\r\n      let newText = text.split(/[ ]+/);\r\n      setText(newText.join(\" \"));\r\n      props.showAlert(\"All extra spaces trimed\", \"success\");\r\n    } else {\r\n      props.showAlert(\"text field is already empty\", \"warning\");\r\n    }\r\n  };\r\n\r\n  const [text, setText] = useState(\"\");\r\n  //text=\"new text\";  // wrong way  to change state\r\n  //setText(\"new text\");  //correct way to change state\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}\r\n      >\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"grey\" : \"white\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n            }}\r\n            id=\"myBox\"\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>\r\n          Convert to uppercase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>\r\n          Convert to lowercase\r\n        </button>\r\n        <button className=\"btn btn-danger mx-2\" onClick={handleclear}>\r\n          Clear\r\n        </button>\r\n        <button className=\"btn btn-success mx-2\" onClick={handleCopy}>\r\n          Copy\r\n        </button>\r\n        <button className=\"btn btn-success mx-2\" onClick={handleTrim}>\r\n          Trim spaces\r\n        </button>\r\n      </div>\r\n      <div\r\n        className=\"container my-3\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}\r\n      >\r\n        <h1>Your text summery</h1>\r\n        <p>\r\n          {text.length === 0 ? 0 : text.split(\" \").length} words and{\" \"}\r\n          {text.length} characters\r\n        </p>\r\n        {/* <p>{0.008 *text.split(\" \").length} minutes read</p> */}\r\n        <p>\r\n          {text.length === 0 ? 0 : 0.008 * text.split(\" \").length} minutes read\r\n        </p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length > 0 ? text : \"enter text to preview here\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Alert(props) {\r\n\r\n  const capitalize = (word) =>{\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  }\r\n\r\n  return (\r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n      <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n      {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"\r\n      ></button> */}\r\n    </div>\r\n  );\r\n}\r\n","\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\n// import About from \"./components/About\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\n\n// import { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 4000);\n  };\n\n  const toggleMode = () => {\n    if (mode === \"dark\") {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n    } else {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"Dark mode has been enabled\", \"success\");\n    }\n  };\n\n  return (\n    // <div className=\"blank\">Lovely</div>\n\n    <>\n      {/* <Navbar title=\"textutils\" about=\"About\" /> */}\n      {/* <Router> */}\n        <Navbar title=\"textutils\" about=\"About\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          \n          {/* <Routes> */}\n            {/* <Route exact path=\"/about\" element={<About />} /> */}\n             \n\n            {/* <Route exact path=\"/\" element={<TextForm showAlert={showAlert} heading=\"Enter the text to analyze\" mode={mode} />} /> */}\n            <TextForm showAlert={showAlert} heading=\"Enter the text to analyze\" mode={mode} />\n            \n          {/* </Routes> */}\n        </div>\n      {/* </Router> */}\n      \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}